agentLabel = "WINDOWS-AGENT"
String projectName = "AspnetCoreMvcDemo1"

pipeline {
    agent { label agentLabel }

	stages {
	    // stage('Blue Env: Download Artifacts from Artifactory') {
		// 	steps {
		// 	echo 'Downloading Artifacts from Artifactory'
		// 	git credentialsId: 'GITHUB-SSH', url: 'https://github.com/daviduDevOps/AspnetCoreMvcDemo1.git'			
		// 	}
		// }

        stage('Blue to Green Deployment') {
			steps {
			    echo 'Downloading Artifacts from Artifactory'
                script{

                    def deployApplicationName = "NGM-Development-BlueGreenDeployment1"
                    def deploymentGroupName1 = "NGM-Development-BlueGreenDeploymentGroup1"
                    def deploymentGroupName2 = "NGM-Development-BlueGreenDeploymentGroup2"

                    def deploymentGroupName = ""
                    def deploymentType = ""

                    deploymentType = powershell label: '', returnStdout: true, script: """
                        \$deploymentGroupDetails = aws deploy get-deployment-group --application-name $deployApplicationName --deployment-group-name NGM-Development-BlueGreenDeploymentGroup1 | ConvertFrom-Json
                        \$deploymentGroupDetails.deploymentGroupInfo.ec2TagFilters.Value
                    """ 
                    echo "deploymentType  "+deploymentType
                    deploymentGroupName = deploymentType.equals('BLUE') ? deploymentGroupName = deploymentGroupName1 : deploymentGroupName2
                    echo "deploymentGroupName  "+deploymentGroupName
                    step([
                        $class: 'AWSCodeDeployPublisher', 
                        applicationName: deployApplicationName,
                        deploymentConfig: 'CodeDeployDefault.AllAtOnce', 
                        deploymentGroupAppspec: false, 
                        deploymentGroupName: deploymentGroupName, 
                        deploymentMethod: 'deploy', 
                        excludes: '', iamRoleArn: '', includes: '**', pollingFreqSec: 15, pollingTimeoutSec: 3000, proxyHost: '', proxyPort: 0, 
                        region: 'us-east-2', 
                        s3bucket: 'ngm-app-demo', 
                        s3prefix: '', 
                        subdirectory: '', 
                        versionFileName: '', 
                        waitForCompletion: true
                    ])    
                }
            }
        }
    }
}