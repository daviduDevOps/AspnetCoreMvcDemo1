import groovy.json.JsonSlurper

agentLabel = "Dev"
String projectName = "AspnetCoreMvcDemo1"
String cdPipelineRepo = "https://github.com/daviduDevOps/AspnetCoreMvcDemo1.git"
String s3BucketName = ""
String awsRegion = "us-east-1" //  should be input parameters.

pipeline {
    agent { label agentLabel }
	stages {
	    stage('Blue Env: Download Artifacts from Artifactory') {
			steps {
			    echo 'Downloading Artifacts from Artifactory'
			    git credentialsId: 'davidu-github-credentials', url: 'https://github.com/daviduDevOps/AspnetCoreMvcDemo1.git'
            }
		}
		stage('Build Asp.net  core mvc application') {
			steps {
				bat """
				cd ${projectName}
				dotnet build -c Release /p:Version=${BUILD_NUMBER}
				dotnet publish -c Release --no-build
				"""
			}
		}
		stage('Blue Env: upload artifacts to S3') {
			steps {
				echo 'upload artifacts to S3'
				//withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
   				powershell label: '', script: '''$path = "/ngm/dev/db/"
				$paramList = aws ssm get-parameters-by-path --path $path --query "Parameters[*].{Name:Name,Value:Value}"  --with-decryption --region us-east-1
				$paramJsonArray = $paramList | ConvertFrom-Json
				foreach($item in $paramJsonArray){
					if($item.name -eq "/ngm/dev/db/servername"){
						$serverName = $item.value;
					}
					if($item.name -eq "/ngm/dev/db/database"){
						$database = $item.value;
					}
					if($item.name -eq "/ngm/dev/db/username"){
						$userName = $item.value;
					}
					if($item.name -eq "/ngm/dev/db/password"){
						$password = $item.value;
					}
					echo $serverName"  "$userName
					echo $WORKSPACE
				}'''

				UpdateAppSettingsFromParamStore($serverName, $database, $userName, $password)
			}
			 // some block
			//}
		}
		stage('Blue Env: Deployment') {
			steps {
				echo 'Code Deployment inprogress..'
				//getCodedeployApplicationName()


				//CodeDeployement()
			}
		}
		stage('Blue Env: Update Host file') {
			steps {
				echo 'Blue Env: Update Host file'
			}
		}
		stage('Blue Env: Validate deployment') {
			input {
				message "Please approve to proceed ?"
				ok "Yes, we should."
				submitter "alice,bob"
				parameters {		string(name: 'APPROVER', defaultValue: 'Mr Sridhar', description: 'We are going to deploy build no: ?')
				}
			}
			steps {
				echo 'CI Release Environment'
				//build 'QA'
			}
		}
		stage('Green Env: Update Host file') {
			steps {
				echo 'Green Env: Update Host file'
			}
		}
		stage("Reroute Traffic from Blue to Green"){
			steps{
                echo 'eroute Traffic from Blue to Green'
			}
		}
		stage('Blue Env: Terminate Blue Instances') {
			steps {
				echo 'Blue Env: Terminate Blue Instances'
			}
		}
	}
}

def CodeDeployement(String applicationName, String deploymentConfig, String deploymentGroupName, String s3bucket, String versionFileName){
	step([
		$class: 'AWSCodeDeployPublisher', 
		applicationName: '{$applicationName}', 
		awsAccessKey: 'AKIA2O67XNNTQOYA3EEH', 
		awsSecretKey: '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', 
		credentials: 'awsAccessKey', 
		deploymentConfig: '{$deploymentConfig}', 
		deploymentGroupAppspec: false, 
		deploymentGroupName: '{$deploymentGroupName}', 
		deploymentMethod: 'deploy', 
		excludes: '', iamRoleArn: '', includes: '**', pollingFreqSec: 15, pollingTimeoutSec: 3000, proxyHost: '', proxyPort: 0, 
		region: 'us-east-1', 
		s3bucket: '{$s3bucket}', 
		s3prefix: '', 
		subdirectory: '', 
		versionFileName: '{$versionFileName}', 
		waitForCompletion: true
	])
}

def GetParamSecretsByEnvironment(){
	echo 'hellow'
}

def UpdateAppSettingsFromParamStore(serverName, database, username, password) {
    def json = new JsonSlurper()
	def filepath = "$WORKSPACE/${projectName}/appsettings.json"
    appSettings = json.parse(new File($filepath))
	def connectionStrings = "Server=${serverName}; Database=${database}; Trusted_Connection=True;Username=${username};pwd=${password}; MultipleActiveResultSets=true"
    appSettings['ConnectionStrings'].DefaultConnection = connectionStrings
    cfg = appSettings
}

